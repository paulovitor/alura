Existem vários meta-char, como . ou *
Existem quantifiers que definem quantas vezes um caractere deve aparecer:
    - {1} é um quantifier que significa uma vez
    - * é um quantifier que significa zero, uma ou mais vezes
. é um meta-char que significa qualquer char
Com \ podemos escapar meta-chars, por exemplo \.

[.-]?- ponto ou hífen zero ou uma vez

Atalhos para whitespace
\t é um tab
\r é carriage return
\n é newline
\f é form feed

Atalhos para definir quantidade
? - zero ou uma vez
* - zero ou mais vezes
+ - uma ou mais vezes
{n} - exatamente n vezes
{n,} - no mínimo n vezes
{n,m} - no mínimo n vezes, no máximo m vezes

Classes de letras
[A-Z] significa de A até Z, sempre maiúscula
[a-z] significa de a até z, sempre minúscula
[A-Za-z] significa A-Z ou a-z
[abc] significa a, b ou c

word char \w é um atalho para [A-Za-z0-9_]

âncora\b (word boundary) para selecionar a posição antes ou depois de uma palavra
inversão do \b, o non-word-boundary: \B (B maiúsculo)
^ é uma âncora que seleciona o início da string alvo
$ é uma âncora que seleciona o fim do alvo

Um grupo é definido através de parênteses ()
Non-capturing groups ?: não devolver um grupo pela regex

Non-Capturing group - (?:de\s+) (não deve devolver o grupo formado pela preposição de e por um \s)
Quantifier - [a-z]? (a classe deve ocorrer zero ou uma vez)

Todos os quantifiers são gananciosos por padrão (eles automaticamente selecionam o máximo de caracteres por padrão)

back-references, uma referência para um texto já encontrado

--

extensão
target: imagem.png
regex:  .*png

cpf
target: João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
regex:  [0-9]{3}[.-]?\d{3}[.-]?\d{3}[.-]?\d{2}

cnpj
target: 15.123.321/8883-22
regex:  \d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}

ip
target: 126.1.112.34
        128.126.12.244
        192.168.0.34
regex:  \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

cep
target: João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
regex:  \d{5}-\d{3}

telefone
target: (21) 3216-2345
regex:  \(\d{2}\) \d{4}-\d{4}

tag code
target: No <code>for</code>, o valor de <code>i</code> começa de zero e é incrementado a cada volta enquanto <code>i < 10</code>, portando o bloco de código do for é executado 10 vezes.
regex: </?code>

números entre 1 e 3 E 6 e 9
target:
regex: [1-36-9]

data extensa
target: 11 de Abril de 1995
regex: [0-3]?\d\s{1,}de\s+[A-Z][a-zç]{1,8}\s+de\s+[12]\d{3}

horário
target: 19h32min16s
regex: \d{2}h\d{2}min\d{2}s

placa de carro
target: KMG-8089
regex: [A-Z]{3}-\d{4}

nomes e notas dos alunos com notas de 7.2 a 7.9
target: 9.8 - Robson, 7.1 - Teresa, 4.5 - Armênio, 6.5 - Zulu, 7.7 - Stefania, 7.8, 5.0 - Romeu, 7.2 - Pompilho, 3.1 - Reinaldo, 7.3 - Bernadete, 4.7 - Cinério
regex: 7\.[2-9]\s+-\s+\w+

extrairmos a nota e o nome de alunos elegíveis que tiraram acima de 7.5 para receberem até meio ponto 
target: 10 - Bruce, 9.5 - Miranda, 7.9    - Bob, 10 - Zimbabue, 7.5 - Bety
regex: [7]\.[5-9]\s+-\s+\w+

match apenas com as palavras GARROTE, SERROTE e ROTEIRO
target: BALEIRO GARROTE SERROTE GOLEIRO ROTEIRO
regex: [A-Z]*ROT[A-Z]+

seleciona o alvo inteiro
taget: ?classes+poderosas*
regex: [a-z?*+]+

O username precisa ser da seguinte forma:

O limite é de 10 caracteres;
O primeiro caractere deve ser uma letra do alfabeto, não pode ser um número;
A partir do segundo caractere podemos ter letras maiúsculas, minúsculas e números;

regex: [a-zA-Z][a-zA-Z0-9]{0,9}
       [a-zA-Z]\w{0,9}

achar a preposição de
target: denise teste, 987.654.321-00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande
regex: \bde\b

achar seguência de três aaa
target: aaa aaaa aaa aaaa aaa
regex: \ba{3}\b

validar url
target: file:///Users/nico/Downloads/regex/index.html
regex: ^file.+html$

número de CPF
target: 111.111.111-11
regex: ^\d{3}\.\d{3}\.\d{3}-\d{2}$

pegar expressão que começa com Caused by:
target: Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
regex: ^Caused by:.*

strings de data no formato Data: dia/mes/ano ou Data:dia/mes/ano
target: Data: 02/09/1964 ou Data:02/09/1964
regex: ^Data:\s{0,}\d{2}\/\d{2}\/\d{4}$
       ^Data:[\s]?[0-9]{2}\/[0-9]{2}\/[1-9]{4}$

finaliza com .html
target: não irá funcionar em: index.htmlx
regex: .*\.html$

a silaba por deve aparecer dentro de uma palavra, nunca no inicio ou fim
target: português proporcional compor
regex: \Bpor\B

regex no framework Django Python
target: https://cursos.alura.com.br/courses/expressoes-regulares2/sections/3/exercises/15179/answer/4766568
regex_url = r'(.*/exercises/\d+/answer/\d+)$'

devolver os grupos (21 de Maio de 1993 ||| 21 ||| Maio ||| 1993)
target: João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
regex: ([0123]?\d)\s+(?:de\s+)?([A-Z][a-zç]{1,8})\s+(?:de\s+)?([12]\d{3})

recuperar o digito verificador
target: 123.456.789-00
regex: \d{3}[-.]?\d{3}[.-]?\d{3}[.-]?(\d{2})

lei de formação: cada letra da palavra recebe o prefixo Z, mas não apenas isso. A letra Z é seguida de um número com um ou mais dígitos
target: Z171PZ7AZ23PZ7819AZ78GZ1AZ99IZ34O
regex: Z\d+(\w)

uma Regex que possa encontrar essa linha e separar em dois grupos, Causa e Descrição
target: Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
regex: (Caused[\s\w:.-]+):([\w\s]+) 
       (^Caused by:.*:)(.*)

extrai o nome do usuário do email
target: super.mario@caelum.com.br 
        donkey.kong@alura.com.br
        bowser1@alura.com.br
regex: ([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)

validação de email
target: donkey.kong@kart.com.br
        bowser1@games.info 
        super-mario@nintendo.JP
        TEAM.donkey-kong@MARIO.kart1.nintendo.com
regex:  ^([\w-]\.?)+@([\w-]+\.)+([A-Za-z]{2,4})+$
        ^([\w.-]+[a-z\d])@([\w]+\.)+([A-Za-z]{2,4})+$

coletar as informações: Nome, Rua, Número e CEP
target: Nico Steppat|14/05/1977|Rua Buarque de Macedo|50|22222-222|Rio de Janeiro
        Romulo Henrique|14/06/1993|Rua do Lins|120|12345-322|Rio de Janeiro
        Leonardo Cordeiro|01/01/1995|Rua de Campo Grande|01|00001-234|Rio de Janeiro
regex:  ([\w\s]+)\|(?:\d\d\/\d\d\/\d\d\d\d)\|([\w\s]+)\|(\d{1,4})\|(\d{5}-\d{3})\|(?:[\w\s]{10,})
        ([a-zA-Z\s])+\|(\d{2}\/\d{2}\/\d{4})\|([a-zA-Z\s])+\|(\d{+})\|(\d{5}-\d{3})\|(?:[a-zA-Z\s])+

recuperar conteúdo de uma tag h1
target: <h1 class="text-left">Expressões regulares</h1>
regex: <h1.+?>([\w\sõãí.]+)</h1>

regex preguiçosa
target: alura
regex: [a-z]+?

recuperar conteúdo de uma tag h1 e h2
target: <h1 class="text-left">Expressões regulares</h1>
regex: <(h1|h2).+?>([\w\sõãí.]+)<\/\1>

garantir o fechamento de uma tag de prioridade p1, p2 ... p9
target: <soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope" 
               soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

<soap:Body xmlns:m="http://www.caelum.com.br/produto">
  <m:GetStock>
    <p1> ... </p1>
  </m:GetStock>
</soap:Body>

</soap:Envelope>
regex: <(p[1-9])>.*<\/\1>

classe de caracteres que seleciona tudo que não é um >
target: target: <h1 class="text-left">Expressões regulares</h1>
regex: <h1[^>]+>

devolve o que não queriamos
target: Z171PZ7AZ23PZ7819AZ78GZ1AZ99IZ34O
regex: [^Z\d]